I"o(<h2 id="--이전-글로--다음-글로-"><a href="https://maizer2.github.io/5.%20bookreview/2021/09/27/(OpenCV-4로-배우는-컴퓨터-비전과-머신-러닝)-1-세팅.html">←  이전 글로</a> 　 <a href="https://maizer2.github.io/5.%20bookreview/2022/00/00/(OpenCV-4로-배우는-컴퓨터-비전과-머신-러닝)-3-미정.html">다음 글로 →</a></h2>

<h3 id="lenna-출력하기">Lenna 출력하기</h3>

<hr />

<p>폴더 내부에 lenna.bmp가 없으면 이미지가 불러와지지 않습니다.</p>

<p><img src="https://raw.githubusercontent.com/maizer2/gitblog_img/master/img/BookReview/2021-09-28-(OpenCV-by-C++)-2-Lenna-출력하기/lenna.bmp" alt="" /></p>

<p>입력</p>

<pre><code class="language-C++">#include "opencv2/opencv.hpp"
#include &lt;iostream&gt;

int main() {
	std::cout &lt;&lt; "Hello OpenCV" &lt;&lt; CV_VERSION &lt;&lt; std::endl;
	
	cv::Mat img;
	img = cv::imread("lenna.bmp");

	if (img.empty()) {
		std::cerr &lt;&lt; "Image load failed! " &lt;&lt; std::endl;
		return -1;
	}

	cv::namedWindow("lenna");
	cv::imshow("lenna", img);

	cv::waitKey();
	return 0;
}
</code></pre>

<p>출력</p>

<p><img src="https://raw.githubusercontent.com/maizer2/gitblog_img/master/img/C++/2021-09-28-(OpenCV by C++)-2-Lenna 출력하기/1.PNG" alt="" /></p>

<h3 id="main코드-분석">main코드 분석</h3>

<hr />

<p>위 main코드에는 기본적인 OpenCV 함수를 볼 수 있다.</p>

<p>imread(), nameWindow(), imshow(), waitKey()</p>

<ul>
  <li>
    <h4 id="cvimread">cv::imread()</h4>

    <p>불러온 이미지 데이터를 Mat 객체로 변환하여 반환합니다.</p>

    <pre><code class="language-C++">Mat imread(const String&amp; filename, int flags = IMREAD_COLOR);
</code></pre>

    <ul>
      <li>
        <p>filename : 불러올 영상 이름</p>
      </li>
      <li>
        <p>flags        :  영상 파일 불러오기 옵션 플래그, ImreadModes 열거형 상수를 지정한다.</p>

        <ul>
          <li>
            <p>기본값으로 IMREAD_COLOR가 지정되어 있다. (3채널 컬러 영상으로 반환)</p>

            <table>
              <thead>
                <tr>
                  <th>ImreadModes 열거형 상수</th>
                  <th style="text-align: left">설명</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>IMREAD_UNCHANGED</td>
                  <td style="text-align: left">입력 파일에 지정된 그대로의 컬러 속성을 사용합니다.</td>
                </tr>
                <tr>
                  <td>IMREAD_CRAYSCALE</td>
                  <td style="text-align: left">1채널 그레이스케일 영상으로 변환하여 불러옵니다.</td>
                </tr>
                <tr>
                  <td>IMREAD_COLOR</td>
                  <td style="text-align: left">3채널 BGR 컬러 영상으로 변환하여 불러옵니다.</td>
                </tr>
                <tr>
                  <td>IMREAD_REDUCED_GRAYSCALE</td>
                  <td style="text-align: left">크기를 1/2로 줄인 1채널 그레이스케일 영상으로 변환합니다.</td>
                </tr>
                <tr>
                  <td>IMREAD_REDUCED_COLOR_2</td>
                  <td style="text-align: left">크기를 1/2로 줄인 3채널 BGR 영상으로 변환합니다.</td>
                </tr>
                <tr>
                  <td>IMREAD_IGNORE_ORIENTATION</td>
                  <td style="text-align: left">EXIF에 저장된 방향 정보를 사용하지 않습니다.</td>
                </tr>
              </tbody>
            </table>
          </li>
        </ul>
      </li>
      <li>
        <p>return     : 불러온 영상 데이터(Mat 객체), 파일이 없거나 잘못된 확장자일 경우 빈 객체를 반환</p>
      </li>
      <li>
        <h5 id="matempty">Mat::empty()</h5>

        <p>Mat 객체가 제대로 생성되었는지를 확인한다.</p>

        <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">Mat</span><span class="o">::</span><span class="n">empty</span><span class="p">()</span> <span class="k">const</span>
</code></pre></div>        </div>

        <ul>
          <li>반환값 : 행렬의 rows 또는 cols 멤버 변수가 0이거나, 또는 data 멤버 변수가 NULL이면 true를 반환</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="cvimwrite">cv::imwrite()</h4>

    <p>Mat 객체에 저장되어 있는 영상 데이터를 파일로 저장한다.</p>

    <pre><code class="language-C++">bool imwrite(const String$ filename, InputArray img, const std::vector&lt;int&gt;&amp; params = std::vector&lt;int&gt;());
</code></pre>

    <ul>
      <li>
        <p>filename : 저장할 영상 파일 이름</p>
      </li>
      <li>
        <p>img          : 저장할 영상 데이터(Mat 객체)</p>
      </li>
      <li>
        <p>params   : 저장할 영상 파일 형식에 의존적이 파라미터(플래그 &amp; 값) 쌍</p>

        <p>​				   (paramId_1, paramValue_1, paramId_2, paramValue_2, … )</p>
      </li>
      <li>
        <p>반환값     : 정사적으로 저장하면 true, 실패하며 false를 반환합니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="cvnamedwindow">cv::namedWindow()</h4>

    <pre><code class="language-C++">void namedWindow(const String&amp; winname, int flags = WINDOW_AUTOSIZE);
</code></pre>

    <ul>
      <li>
        <p>winname : 영상 출력 창 상단에 출력되는 창 고유 이름, 이 문자열로 창을 구분한다.</p>
      </li>
      <li>
        <p>flags         : 생성되는 창의 속성을 지정하는 플래그, WindowFlags 열거형 상수를 지정합니다.</p>

        <table>
          <thead>
            <tr>
              <th>WindowFlags 열거형 상수</th>
              <th>설명</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>WINDOW_NORMAL</td>
              <td>출력 창의 크기에 맞춰 출력, 임의 변경 가능</td>
            </tr>
            <tr>
              <td>WINDOW_AUTOSIZE(Defualt)</td>
              <td>출력 영상 크기에 맞춰 자동 변경됩니다. 임의 변경 불가능</td>
            </tr>
            <tr>
              <td>WINDOW_OPENGL</td>
              <td>OpenGL을 지원합니다.</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>윈도우에서 창을 구분하기 위해서는 핸들이라는 숫자 값을 사용하지만,</p>

        <p>OpenCV에서는 각가의 창에 고유한 문자열을 부여하여 각각의 창을 구분합니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <h4 id="cvdestroywindow-cvdestroyallwindows">cv::destroyWindow(), cv::destroyAllWindows()</h4>

    <p>프로그램이 동작 중에 창을 닫고 싶을 때</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">destroyWindow</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">winname</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">destroyAllWindows</span><span class="p">();</span>
</code></pre></div>    </div>

    <ul>
      <li>winname : 소멸시킬 창 이름</li>
    </ul>
  </li>
  <li>
    <h4 id="cvmovewindow">cv::moveWindow()</h4>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">moveWindow</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">winname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">);</span>
</code></pre></div>    </div>

    <ul>
      <li>winname : 위치를 이동할 창 이름</li>
      <li>x                : 창이 이동할 위치의 x 좌표</li>
      <li>y                : 창이 이동할 위치의 y 좌표</li>
    </ul>
  </li>
  <li>
    <h4 id="cvresizewindow">cv::resizeWindow()</h4>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">resizeWindow</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">winname</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">height</span><span class="p">);</span>
</code></pre></div>    </div>

    <ul>
      <li>winname : 크기를 변경할 창 이름</li>
      <li>width        : 창의 가로 크기</li>
      <li>height       :  창의 세로 크기</li>
    </ul>
  </li>
  <li>
    <h4 id="cvimshow">cv::imshow();</h4>

    <p>Mat 클래스 객체에 저장된 영상 데이터를 화면에 출력하는 함수</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">imshow</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span><span class="o">&amp;</span> <span class="n">winname</span><span class="p">,</span> <span class="n">InputArray</span> <span class="n">mat</span><span class="p">);</span>
</code></pre></div>    </div>

    <ul>
      <li>winname : 영상을 출력할 대상 창 이름</li>
      <li>mat          : 출력할 영상 데이터(Mat 객체)</li>
    </ul>
  </li>
  <li>
    <h4 id="cvwaitkey">cv::waitKey()</h4>

    <p>사용자로부터 키보드 입력을 받는 용도로 사용</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int waitKey(int delay = 0);
</code></pre></div>    </div>

    <ul>
      <li>delay   : 키 입력을 기다릴 시간(밀리초 단위). delay &lt;= 0 이면 무한히 기다립니다.</li>
      <li>반환값 : 입력한 키 값. 지정한 시간이 지나면 -1을 반환</li>
    </ul>
  </li>
</ul>

:ET